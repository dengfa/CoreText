apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 152
        versionName "1.1.52"
        manifestPlaceholders = [
                GETUI_APP_ID    : "cWnB5X9RTq5e3GryJNXoo2",
                GETUI_APP_KEY   : "RXWo13H1257djfZYjqanK7",
                GETUI_APP_SECRET: "m57FYRmEdnA9DV5CkLqVk4"
        ]
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.github.yangzc:AndroidSupport:1.5.4'
    provided files('extlibs/easemobchat_2.2.3.jar')
    compile 'com.getui:sdk:2.+'
    compile 'cn.knowbox:coretext:1.0.0'
}


def isReleaseBuild() {
    return android.defaultConfig.versionName.contains("SNAPSHOT") == false
}

def sonatypeRepositoryUrl
if (isReleaseBuild()) {
    sonatypeRepositoryUrl = RELEASE_REPOSITORY_URL
} else {
    sonatypeRepositoryUrl = SNAPSHOT_REPOSITORY_URL
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                //beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.artifactId = PROJ_ARTIFACTID

                Properties properties = new Properties()
                properties.load(project.rootProject.file('local.properties').newDataInputStream())
                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: properties.getProperty("USERNAME"), password: properties.getProperty("PASSWORD"))
                }

                pom.project {
                    name PROJ_NAME
                    groupId PROJ_GROUP
                    version android.defaultConfig.versionName

//                    scm {
//                        url POM_SCM_URL
//                        connection POM_SCM_CONNECTION
//                        developerConnection POM_SCM_DEV_CONNECTION
//                    }

                    licenses {
                        license {
                            name PROJ_LICENCE_NAME
                            url PROJ_LICENCE_URL
                            distribution PROJ_LICENCE_DEST
                        }
                    }

                    developers {
                        developer {
                            id DEVELOPER_ID
                            name DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

//    signing {
//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }

    task androidJavadocs(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.source
        options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }
        classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        //basename = artifact_id
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        //archives packageReleaseJar
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}

